import xlwings as xw
import pandas as pd
import streamlit as st
from pathlib import Path

# Page configuration
st.set_page_config(
    page_title="CFB 2025 Preview",
    page_icon="üèà",
    layout="wide",
    initial_sidebar_state="expanded",
)

st.title("üéØ College Football 2025 Pre-Season Preview")

# Load workbook and 'Expected Wins' sheet
DATA_FILE = Path(__file__).parent / "Preseason 2025.xlsm"
wb = xw.Book(DATA_FILE)
expected = wb.sheets["Expected Wins"]
df_expected = expected.range("C2").options(
    pd.DataFrame, header=1, index=False, expand="table"
).value

# Clean and rename expected wins
# Drop blank and placeholder columns
df_expected.drop(
    columns=[c for c in df_expected.columns if str(c).strip() == ""],
    inplace=True, errors='ignore'
)
for col in ["Column1", "Column3"]:
    df_expected.drop(columns=col, inplace=True, errors='ignore')
# Rename columns
rename_map = {
    "Column18": "Power Rating",
    "Projected Overall Record": "Projected Overall Wins",
    "Column2": "Projected Overall Losses",
    "Projected Conference Record": "Projected Conference Wins",
    "Column4": "Projected Conference Losses",
    "Pick": "OVER/UNDER Pick",
    "Column17": "Schedule Difficulty Rank",
    "xWins for Playoff Team": "Schedule Difficulty Rating",
    "Winless Probability": "Average Game Quality",
}
df_expected.rename(columns=rename_map, inplace=True)
# Preseason Rank
df_expected.insert(0, "Preseason Rank", range(1, len(df_expected) + 1))
# Format Undefeated Probability as percentage
if "Undefeated Probability" in df_expected.columns:
    df_expected["Undefeated Probability"] = df_expected["Undefeated Probability"].apply(
        lambda x: f"{x*100:.1f}%" if pd.notnull(x) else ""
    )
# Round numeric
num_cols = df_expected.select_dtypes(include=["number"]).columns.tolist()
num_cols = [c for c in num_cols if c not in ["Preseason Rank", "Schedule Difficulty Rank"]]
if num_cols:
    df_expected[num_cols] = df_expected[num_cols].round(1)
# Schedule Difficulty Rank as int
if "Schedule Difficulty Rank" in df_expected.columns:
    df_expected["Schedule Difficulty Rank"] = df_expected["Schedule Difficulty Rank"].round(0).astype(int)

# Sidebar navigation
tab = st.sidebar.radio("Navigation", ["Rankings", "Conference Overviews", "Team Dashboards", "Charts & Graphs"])

if tab == "Rankings":
    st.header("üìã Rankings")
    # Sidebar filters
    search = st.sidebar.text_input("Search team...", "")
    conf_filter = st.sidebar.text_input("Filter by conference...", "")
    # Initialize DataFrame
    df = df_expected.copy()
    # Apply team search
    if search and "Team" in df.columns:
        df = df[df["Team"].str.contains(search, case=False, na=False)]
    # Apply conference filter
    if conf_filter and "Conference" in df.columns:
        df = df[df["Conference"].str.contains(conf_filter, case=False, na=False)]

    # Load logos sheet
    try:
        df_images = wb.sheets["Logos"].range("A1").options(
            pd.DataFrame, header=1, index=False, expand="table"
        ).value
    except Exception:
        df_images = pd.DataFrame()
    # Merge images if available
    if not df_images.empty and set(["Team", "Image URL"]).issubset(df_images.columns):
        df = df.merge(df_images, on="Team", how="left")
    display_df = df.copy()

    # Prepare color scale endpoints
    if "Power Rating" in display_df.columns:
        pr_min = display_df["Power Rating"].min()
        pr_max = display_df["Power Rating"].max()

    # Embed images in Team column
    if "Image URL" in display_df.columns:
        def make_cell(r):
            url = r.get("Image URL")
            team = r["Team"]
            if pd.notnull(url) and str(url).startswith("http"):
                return (
                    f'<img src="{url}" width="24" '
                    f'style="vertical-align:middle; margin-right:8px;">{team}'
                )
            return team
        display_df["Team"] = display_df.apply(make_cell, axis=1)
        display_df.drop(columns="Image URL", inplace=True, errors='ignore')

    # Sorting control
    sort_col = st.sidebar.selectbox("Sort by column", options=display_df.columns.tolist(), index=0)
    asc = st.sidebar.checkbox("Ascending order", value=True)
    if sort_col in display_df.columns:
        display_df = display_df.sort_values(by=sort_col, ascending=asc)

    # Render HTML table with styling
    cols = display_df.columns.tolist()
    html = ["<table style='width:100%; border-collapse:collapse;'>"]
    # Header row
    html.append("<thead><tr>")
    for c in cols:
        style = (
            "border:1px solid #ddd; padding:8px; text-align:center; "
            "background-color:#002060; color:white;"
        )
        if c == "Team":
            style += " white-space:nowrap; min-width:200px;"
        html.append(f"<th style='{style}'>{c}</th>")
    html.append("</tr></thead><tbody>")

    # Data rows
    for _, r in display_df.iterrows():
        html.append("<tr>")
        for c in cols:
            v = r[c]
            style = "border:1px solid #ddd; padding:8px; text-align:center;"
            # Conditional for Power Rating
            if c == "Power Rating" and pd.notnull(v):
                t = (v - pr_min) / (pr_max - pr_min) if pr_max > pr_min else 0
                rch = int(255 + (0 - 255) * t)
                gch = int(255 + (32 - 255) * t)
                bch = int(255 + (96 - 255) * t)
                hexc = f"#{rch:02x}{gch:02x}{bch:02x}"
                text_color = "black" if t < 0.5 else "white"
                style += f" background-color:{hexc}; color:{text_color};"
                cell = f"{v:.1f}"
            # Conditional formatting for OVER/UNDER Pick
            elif c == "OVER/UNDER Pick":
                pick = str(v).upper()
                if pick == "OVER":
                    style += " background-color:#008000; color:white;"
                elif pick == "UNDER":
                    style += " background-color:#FF0000; color:white;"
                cell = pick
            else:
                cell = v
            if c == "Team":
                style += " white-space:nowrap;"
            html.append(f"<td style='{style}'>{cell}</td>")
        html.append("</tr>")
    html.append("</tbody></table>")
    st.markdown("".join(html), unsafe_allow_html=True)

elif tab == "Conference Overviews":

    st.header("üèüÔ∏è Conference Overviews")
    st.info("Coming soon: Conference overview analysis will appear here.")

elif tab == "Team Dashboards":
    st.header("üìä Team Dashboards")
    team = st.sidebar.selectbox("Choose a team", df_expected["Team"].tolist())
    dash = wb.sheets["Dashboard"]
    dash.range("B1").value = team
    st.subheader(f"Dashboard for {team}")
    st.table(dash.range("A1:Z50").value)

elif tab == "Charts & Graphs":
    st.header("üìà Charts & Graphs")
    cg = wb.sheets["Charts and Graphs"]
    c1, c2 = st.columns(2)
    with c1:
        for i, ch in enumerate(cg.charts[:2], start=1):
            fn = f"chart_{i}.png"
            ch.api.Export(str(fn))
            st.image(fn, caption=ch.name)
    with c2:
        for i, ch in enumerate(cg.charts[2:], start=3):
            fn = f"chart_{i}.png"
            ch.api.Export(str(fn))
            st.image(fn, caption=ch.name)
